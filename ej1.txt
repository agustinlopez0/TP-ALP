intexp ::= nat | var | var++ | −u intexp
        | intexp + intexp
        | intexp -b intexp
        | intexp * intexp
        | intexp ÷ intexp

boolexp ::= true | false
        | intexp == intexp
        | intexp /= intexp
        | intexp < intexp
        | intexp > intexp
        | boolexp ∧ boolexp
        | boolexp ∨ boolexp
        | ¬ boolexp

comm ::= skip
        | var = intexp
        | comm; comm
        | if boolexp then comm else comm
        | repeat comm until boolexp

digit ::= ’0’ | ’1’ | · · · | ’9’

letter ::= ’a’ | · · · | ’Z’

nat ::= digit | digit nat

var ::= letter | letter var

casexp ::= boolexp ’:’ ’{’ comm ’}’ casexp | eps

intexp ::= nat
        | var
        | var ’++’
        | ’-’ intexp
        | intexp ’+’ intexp
        | intexp ’-’ intexp
        | intexp ’*’ intexp
        | intexp ’/’ intexp
        | ’(’ intexp ’)’

boolexp ::= ’true’ | ’false’
        | intexp ’==’ intexp
        | intexp ’!=’ intexp
        | intexp ’<’ intexp
        | intexp ’>’ intexp
        | boolexp ’&&’ boolexp
        | boolexp ’||’ boolexp
        | ’!’ boolexp
        | ’(’ boolexp ’)’

comm ::= skip
        | var ’=’ intexp
        | comm ’;’ comm
        | ’if’ boolexp ’{’ comm ’}’
        | ’if’ boolexp ’{’ comm ’}’ ’else’ ’{’ comm ’}’
        | ’repeat’ ’{’ comm ’}’ ’until’ boolexp
        | ’case’ ’{’ casexp ’}’ 